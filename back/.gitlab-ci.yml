workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'dev'

stages:
  - format
  - vet
  - security
  - test
  - release
  - build-docker
  - deploy

format:
  stage: format
  image: golang:latest
  before_script:
    - echo "Running before_script steps..."
    - go mod download
  script:
    - go fmt ./...

vet:
  stage: vet
  image: golang:latest
  before_script:
    - echo "Running before_script steps..."
    - go mod download
  script:
    - go vet -json ./...

security:
  stage: security
  image: golang:latest
  before_script:
    - echo "Running before_script steps..."
    - go mod download
  script:
    - go install github.com/securego/gosec/v2/cmd/gosec@latest
    - gosec ./...

test:
  stage: test
  image: golang:latest
  before_script:
    - echo "Running before_script steps..."
    - go mod download
  script:
    - go test ./... -v

release:
  stage: release
  image: node:latest
  script:
    - npm install
    - npx semantic-release
  only:
    - main
  when: manual
  variables:
    GITLAB_TOKEN: $GITLAB_TOKEN

build:
  stage: build-docker
  image: docker:27.3.1
  services:
    - name: docker:27.3.1-dind
  script:
    # Log in to the GitLab Docker registry
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    # Build the Docker image with the current commit reference tag
    - docker build -t $CI_REGISTRY_IMAGE:latest .

    # Push the Docker image to the GitLab registry
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - dev
    - main

deploy:
  stage: deploy
  image: docker:latest
  before_script:
    # Install SSH client et Docker Compose
    - apk add --no-cache openssh gettext
    # Configure shh to deploy
    - echo "Configure SSH"
    # Save SSH key for the deployment process
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -p $SSH_PORT -H $SSH_HOST >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to VPS"
    - export CI_REGISTRY_IMAGE="$CI_REGISTRY_IMAGE"
    - export MONGODB_URI="$MONGODB_URI"
    - export MONGODB_DB_NAME="$MONGODB_DB_NAME"
    - export ALLOWED_ORIGINS="$ALLOWED_ORIGINS"
    - envsubst < docker-compose.tmpl > docker-compose.yml
    # Create the target directory on the server
    - ssh -p "$SSH_PORT" -i ~/.ssh/id_rsa "$SSH_IP_KEY" "mkdir -p /home/$SSH_USER/tp2/$CI_PROJECT_NAME"
    # Copy docker-compose.tmpl to the server
    - scp -P "$SSH_PORT" docker-compose.yml "$SSH_IP_KEY:/home/$SSH_USER/tp2/$CI_PROJECT_NAME"
    - ssh -o StrictHostKeyChecking=no -T -p "$SSH_PORT" "$SSH_IP_KEY" "sudo docker-login $CI_REGISTRY_USER $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    # SSH into VPS and run the deployment commands
    - |
      ssh -o StrictHostKeyChecking=no -T -p "$SSH_PORT" -i ~/.ssh/id_rsa "$SSH_IP_KEY" << EOF
        set -e
        cd /home/"$SSH_USER"/tp2/$CI_PROJECT_NAME

        # Pull the latest backend image from the registry
        sudo docker-compose-pull

        sudo docker-compose-up
      EOF
  only:
    - main
